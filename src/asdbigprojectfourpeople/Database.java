/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package asdbigprojectfourpeople;

import java.util.Date;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.util.Arrays;

/**
 *
 * @author julio
 */
public class Database extends javax.swing.JFrame {

    protected static Database db;
    protected JTable dbTabel;
    protected static String[][] allData;

    // NITIP
//        for (int count = 0; count < model.getRowCount(); count++) {
//            List<String> temp = new ArrayList<>();
//            for (int kolom = 0; kolom < model.getColumnCount(); kolom++) {
//                temp.add(model.getValueAt(count, kolom).toString());
//            }
//            numdata.add(temp.toString());
//        }
//        System.out.println(numdata);
    // ===================================
    /**
     * Creates new form Dapur
     */
    public Database() {
        initComponents();
        db = this;
        dbTabel = this.jTable1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        comboBoxDB = new javax.swing.JComboBox<>();
        labelSortByDB = new javax.swing.JLabel();
        labelSearchDB = new javax.swing.JLabel();
        inputSearchDB = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Database");
        setLocation(new java.awt.Point(696, 0));
        setSize(new java.awt.Dimension(666, 768));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama", "Pesanan", "Metode Bayar", "Makan di", "Modal", "Harga", "Banyak", "Catatan", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        comboBoxDB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Time (oldest to newest)", "Time (newest to oldest)" }));
        comboBoxDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDBActionPerformed(evt);
            }
        });

        labelSortByDB.setText("Sort By");

        labelSearchDB.setText("Search");

        inputSearchDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputSearchDBActionPerformed(evt);
            }
        });
        inputSearchDB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputSearchDBKeyTyped(evt);
            }
        });

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(labelSearchDB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputSearchDB, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(labelSortByDB)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSortByDB)
                    .addComponent(comboBoxDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSearchDB)
                    .addComponent(inputSearchDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected void resetSearchAndSortDB() {
        inputSearchDB.setText("");
        
        // ubah ke default dulu
        comboBoxDB.setSelectedIndex(0);
        
        // hilangin semua data atau barisan di database
        DefaultTableModel modelTabelDB = (DefaultTableModel) dbTabel.getModel();
        modelTabelDB.setRowCount(0);

        // cek combo box diminta sorting bagaimana
        int indexSorting = comboBoxDB.getSelectedIndex();

        // sorting terlebih dahulu dataInDatabase
        Dapur.dataInDatabase.sortingData(indexSorting);

        // tampilin lagi data yang barusan diurutkan berdasarkan keinginan combo box
        for (int i = 0; i < Dapur.dataInDatabase.getSize(); i++) {
            String[] temp = Arrays.copyOf(Dapur.dataInDatabase.getData()[i], Dapur.dataInDatabase.getData()[i].length);
            long ms = Long.valueOf(temp[8]);
            Date date = new Date(ms);
            String waktu = "" + date;
            temp[8] = waktu;
            modelTabelDB.addRow(temp);
        }
    }
    
    private void comboBoxDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxDBActionPerformed
        // hilangin semua data atau barisan di database
        DefaultTableModel modelTabelDB = (DefaultTableModel) dbTabel.getModel();
        modelTabelDB.setRowCount(0);

        // cek combo box diminta sorting bagaimana
        int indexSorting = comboBoxDB.getSelectedIndex();

        // sorting terlebih dahulu dataInDatabase
        Dapur.dataInDatabase.sortingData(indexSorting);

        // tampilin lagi data yang barusan diurutkan berdasarkan keinginan combo box
        for (int i = 0; i < Dapur.dataInDatabase.getSize(); i++) {
            String[] temp = Arrays.copyOf(Dapur.dataInDatabase.getData()[i], Dapur.dataInDatabase.getData()[i].length);
            long ms = Long.valueOf(temp[8]);
            Date date = new Date(ms);
            String waktu = "" + date;
            temp[8] = waktu;
            modelTabelDB.addRow(temp);
        }
    }//GEN-LAST:event_comboBoxDBActionPerformed

    private void inputSearchDBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputSearchDBKeyTyped
        // hilangin semua data atau barisan di database
        DefaultTableModel modelTabelDB = (DefaultTableModel) dbTabel.getModel();
        modelTabelDB.setRowCount(0);

        // lakuin search data pada dataInDatabse
        String[][] result = Dapur.dataInDatabase.searchData(inputSearchDB.getText());
        
        // tampilin data yang didapat dari search
        for (int i = 0; i < result.length; i++) {
            String[] row = Arrays.copyOf(result[i], result[i].length);
            try {
                long ms = Long.valueOf(row[8]);
                Date date = new Date(ms);
                String waktu = "" + date;
                row[8] = waktu;
            } catch (Exception e) {
            }
            modelTabelDB.addRow(row);
        }
    }//GEN-LAST:event_inputSearchDBKeyTyped

    private void inputSearchDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputSearchDBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputSearchDBActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        resetSearchAndSortDB();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Database.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Database.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Database.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Database.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Database().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboBoxDB;
    private javax.swing.JTextField inputSearchDB;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelSearchDB;
    private javax.swing.JLabel labelSortByDB;
    // End of variables declaration//GEN-END:variables
}
